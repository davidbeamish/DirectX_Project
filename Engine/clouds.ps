////////////////////////////////////////////////////////////////////////////////
// Filename: clouds.ps
// Code Adapted from tutorial http://www.rastertek.com/tertut11.html
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D cloudTexture1 : register(t0);
Texture2D cloudTexture2 : register(t1);
Texture2D perturbTexture : register(t2);
SamplerState SampleType;

cbuffer SkyBuffer
{
    float2 translation;
    float2 scale;
    float2 brightness;
    float2 padding;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 CloudsPixelShader(PixelInputType input) : SV_TARGET
{
    float4 perturbValue;
	float4 textureColor1;
	float4 textureColor2;
    float4 cloudColor1;
	float4 cloudColor2;
	float4 finalColor;

	// First Layer

    // Translate the texture coordinate sampling location by the translation value.
    input.tex.x = input.tex.x + translation.x;

    // Sample the texture value from the perturb texture using the translated texture coordinates.
    perturbValue = perturbTexture.Sample(SampleType, input.tex);

    // Multiply the perturb value by the perturb scale.
    perturbValue = perturbValue * scale.x;

    // Add the texture coordinates as well as the translation value to get the perturbed texture coordinate sampling location.
    perturbValue.xy = perturbValue.xy + input.tex.xy + translation.x;

    // Now sample the color from the cloud texture using the perturbed sampling coordinates.
    cloudColor1 = cloudTexture1.Sample(SampleType, perturbValue.xy);

    // Reduce the color cloud by the brightness value.
    cloudColor1 = cloudColor1 * brightness.x;


	// Second Layer

	// Translate the texture coordinate sampling location by the translation value.
    input.tex.x = input.tex.x + translation.y;

    // Sample the texture value from the perturb texture using the translated texture coordinates.
    perturbValue = perturbTexture.Sample(SampleType, input.tex);

    // Multiply the perturb value by the perturb scale.
    perturbValue = perturbValue * scale.y;

    // Add the texture coordinates as well as the translation value to get the perturbed texture coordinate sampling location.
    perturbValue.xy = perturbValue.xy + input.tex.xy + translation.y;

    // Now sample the color from the cloud texture using the perturbed sampling coordinates.
    cloudColor2 = cloudTexture2.Sample(SampleType, perturbValue.xy);

    // Reduce the color cloud by the brightness value.
    cloudColor2 = cloudColor2 * brightness.y;

	//finalColor = cloudColor1;
	 // Combine the two cloud textures evenly.
    finalColor = lerp(cloudColor1, cloudColor2, 0.5f);

    return finalColor;
}