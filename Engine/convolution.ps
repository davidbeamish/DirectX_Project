////////////////////////////////////////////////////////////////////////////////
// Filename: convolution.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture;
SamplerState SampleType;



cbuffer KernelMatrixBufferType
{
float4 kernelRow1;
float4 kernelRow2;
float4 kernelRow3;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float2 texCoord1 : TEXCOORD1;
	float2 texCoord2 : TEXCOORD2;
	float2 texCoord3 : TEXCOORD3;
	float2 texCoord4 : TEXCOORD4;
	float2 texCoord5 : TEXCOORD5;
	float2 texCoord6 : TEXCOORD6;
	float2 texCoord7 : TEXCOORD7;
	float2 texCoord8 : TEXCOORD8;
	float2 texCoord9 : TEXCOORD9;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 ConvolutionPixelShader(PixelInputType input) : SV_TARGET
{
	float weight1, weight2, weight3, weight4, weight5, weight6, weight7, weight8, weight9;
	float normalization;
	float4 color;


	// Create the weights that each neighbor pixel will contribute to the blur.
	weight1 =  0.0f;
	weight2 =  0.0f;
	weight3 =  0.0f;
	weight4 =  -1.0f;
	weight5 =  1.0f;
	weight6 =  0.0f;
	weight7 =  0.0f;
	weight8 =  0.0f;
	weight9 =  0.0f;

	// Create a normalized value to average the weights out a bit.
	//normalization = (weight1 + weight2 + weight3 + weight4 + weight5 + weight6 + weight7 + weight8 + weight9) / 9.0f;
	normalization = 1.0f;
	// Normalize the weights.
	
	weight1 = weight1 / normalization;
	weight2 = weight2 / normalization;
	weight3 = weight3 / normalization;
	weight4 = weight4 / normalization;
	weight5 = weight5 / normalization;
	weight6 = weight6 / normalization;
	weight7 = weight7 / normalization;
	weight8 = weight8 / normalization;
	weight9 = weight9 / normalization;	

	// Initialize the color to black.
	color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Add the nine horizontal pixels to the color by the specific weight of each.
	//color += shaderTexture.Sample(SampleType, input.texCoord1) *  weight1;
	//color += shaderTexture.Sample(SampleType, input.texCoord2) *  weight2;
	//color += shaderTexture.Sample(SampleType, input.texCoord3) *  weight3;
	//color += shaderTexture.Sample(SampleType, input.texCoord4) *  weight4;
	//color += shaderTexture.Sample(SampleType, input.texCoord5) *  weight5;
	//color += shaderTexture.Sample(SampleType, input.texCoord6) *  weight6;
	//color += shaderTexture.Sample(SampleType, input.texCoord7) *  weight7;
	//color += shaderTexture.Sample(SampleType, input.texCoord8) *  weight8;
	//color += shaderTexture.Sample(SampleType, input.texCoord9) *  weight9;

	// Add the nine horizontal pixels to the color by the specific weight of each.
	color += shaderTexture.Sample(SampleType, input.texCoord1) *  kernelRow1.x;
	color += shaderTexture.Sample(SampleType, input.texCoord2) *  kernelRow1.y;
	color += shaderTexture.Sample(SampleType, input.texCoord3) *  kernelRow1.z;
	color += shaderTexture.Sample(SampleType, input.texCoord4) *  kernelRow2.x;
	color += shaderTexture.Sample(SampleType, input.texCoord5) *  kernelRow2.y;
	color += shaderTexture.Sample(SampleType, input.texCoord6) *  kernelRow2.z;
	color += shaderTexture.Sample(SampleType, input.texCoord7) *  kernelRow3.x;
	color += shaderTexture.Sample(SampleType, input.texCoord8) *  kernelRow3.y;
	color += shaderTexture.Sample(SampleType, input.texCoord9) *  kernelRow3.z;

	//color = float4(1.0f, 1.0f, 1.0f, 1.0f) - shaderTexture.Sample(SampleType, input.texCoord5);

	// Set the alpha channel to one.
	color.a = 1.0f;

    return color;
}